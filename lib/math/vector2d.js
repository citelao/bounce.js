// Generated by CoffeeScript 1.6.3
(function() {
  var Vector2D;

  Vector2D = (function() {
    Vector2D.prototype.x = 0;

    Vector2D.prototype.y = 0;

    function Vector2D(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
    }

    Vector2D.prototype.add = function(vector) {
      if (!Vector2D.isVector2D(vector)) {
        return this._addScalar(vector);
      }
      this.x += vector.x;
      this.y += vector.y;
      return this;
    };

    Vector2D.prototype._addScalar = function(n) {
      this.x += n;
      this.y += n;
      return this;
    };

    Vector2D.prototype.subtract = function(vector) {
      if (!Vector2D.isVector2D(vector)) {
        return this._subtractScalar(vector);
      }
      this.x -= vector.x;
      this.y -= vector.y;
      return this;
    };

    Vector2D.prototype._subtractScalar = function(n) {
      return this._addScalar(-n);
    };

    Vector2D.prototype.multiply = function(vector) {
      if (!Vector2D.isVector2D(vector)) {
        return this._multiplyScalar(vector);
      }
      this.x *= vector.x;
      this.y *= vector.y;
      return this;
    };

    Vector2D.prototype._multiplyScalar = function(n) {
      this.x *= n;
      this.y *= n;
      return this;
    };

    Vector2D.prototype.divide = function(vector) {
      if (!Vector2D.isVector2D(vector)) {
        return this._divideScalar(vector);
      }
      this.x /= vector.x;
      this.y /= vector.y;
      return this;
    };

    Vector2D.prototype._divideScalar = function(n) {
      return this._multiplyScalar(1 / n);
    };

    Vector2D.prototype.clone = function() {
      return new Vector2D(this.x, this.y);
    };

    Vector2D.prototype.copy = function(vector) {
      this.x = vector.x;
      this.y = vector.y;
      return this;
    };

    Vector2D.prototype.equals = function(vector) {
      return vector.x === this.x && vector.y === this.y;
    };

    Vector2D.prototype.toString = function() {
      return "(" + this.x + ", " + this.y + ")";
    };

    Vector2D.prototype.toFixed = function(n) {
      this.x = parseFloat(this.x.toFixed(n));
      this.y = parseFloat(this.y.toFixed(n));
      return this;
    };

    Vector2D.prototype.toArray = function() {
      return [this.x, this.y];
    };

    Vector2D.isVector2D = function(item) {
      return item instanceof Vector2D;
    };

    return Vector2D;

  })();

  module.exports = Vector2D;

}).call(this);
