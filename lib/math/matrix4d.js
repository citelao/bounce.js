// Generated by CoffeeScript 1.6.3
(function() {
  var Matrix4D;

  Matrix4D = (function() {
    Matrix4D.prototype._array = null;

    function Matrix4D(array) {
      this._array = (array != null ? array.slice(0) : void 0) || [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }

    Matrix4D.prototype.equals = function(matrix) {
      return this.toString() === matrix.toString();
    };

    Matrix4D.prototype.identity = function() {
      this.setArray([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
      return this;
    };

    Matrix4D.prototype.multiply = function(matrix) {
      var i, j, k, res, value, _i, _j, _k;
      res = new Matrix4D;
      for (i = _i = 0; _i < 4; i = ++_i) {
        for (j = _j = 0; _j < 4; j = ++_j) {
          for (k = _k = 0; _k < 4; k = ++_k) {
            value = res.get(i, j) + this.get(i, k) * matrix.get(k, j);
            res.set(i, j, value);
          }
        }
      }
      return this.copy(res);
    };

    Matrix4D.prototype.transpose = function() {
      var a;
      a = this.getArray();
      this.setArray([a[0], a[4], a[8], a[12], a[1], a[5], a[9], a[13], a[2], a[6], a[10], a[14], a[3], a[7], a[11], a[15]]);
      return this;
    };

    Matrix4D.prototype.get = function(row, column) {
      return this.getArray()[row * 4 + column];
    };

    Matrix4D.prototype.set = function(row, column, value) {
      return this._array[row * 4 + column] = value;
    };

    Matrix4D.prototype.copy = function(matrix) {
      this._array = matrix.getArray();
      return this;
    };

    Matrix4D.prototype.clone = function() {
      return new Matrix4D(this.getArray());
    };

    Matrix4D.prototype.getArray = function() {
      return this._array.slice(0);
    };

    Matrix4D.prototype.setArray = function(array) {
      this._array = array;
      return this;
    };

    Matrix4D.prototype.toString = function() {
      return "(" + (this.getArray().join(", ")) + ")";
    };

    Matrix4D.prototype.toFixed = function(n) {
      var value;
      this._array = (function() {
        var _i, _len, _ref, _results;
        _ref = this._array;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          value = _ref[_i];
          _results.push(parseFloat(value.toFixed(n)));
        }
        return _results;
      }).call(this);
      return this;
    };

    return Matrix4D;

  })();

  module.exports = Matrix4D;

}).call(this);
