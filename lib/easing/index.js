// Generated by CoffeeScript 1.6.3
(function() {
  var Easing, MathHelpers;

  MathHelpers = require("../math/helpers");

  Easing = (function() {
    function Easing() {}

    Easing.prototype.calculate = function(ratio) {
      return ratio;
    };

    Easing.prototype.serialize = function() {
      return {};
    };

    Easing.prototype.findOptimalKeyPoints = function(threshold, resolution) {
      var area, halfway, i, keyPoint, keyPoints, loops, result, values;
      if (threshold == null) {
        threshold = 1.0;
      }
      if (resolution == null) {
        resolution = 1000;
      }
      keyPoints = [0];
      values = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= resolution ? _i < resolution : _i > resolution; i = 0 <= resolution ? ++_i : --_i) {
          _results.push(this.calculate(i / resolution));
        }
        return _results;
      }).call(this);
      keyPoints = keyPoints.concat(MathHelpers.findTurningPoints(values));
      keyPoints.push(resolution - 1);
      i = 0;
      loops = 1000;
      while (loops--) {
        if (i === keyPoints.length - 1) {
          break;
        }
        area = MathHelpers.areaBetweenLineAndCurve(values, keyPoints[i], keyPoints[i + 1]);
        if (area <= threshold) {
          i++;
        } else {
          halfway = Math.round(keyPoints[i] + (keyPoints[i + 1] - keyPoints[i]) / 2);
          keyPoints.splice(i + 1, 0, halfway);
        }
      }
      if (loops === 0) {
        return [];
      }
      return result = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keyPoints.length; _i < _len; _i++) {
          keyPoint = keyPoints[_i];
          _results.push(keyPoint / (resolution - 1));
        }
        return _results;
      })();
    };

    return Easing;

  })();

  module.exports = Easing;

}).call(this);
